from cmu_cs3_graphics import *

class Graph(object):
    def __init__(self, grid):
        self.table = {}
        self.grid = grid
        #self.rowDiff = len(self.grid[0])

    def connect(self, nodeX, nodeY):
        if nodeX not in self.table:
            self.table[nodeX] = []
        if nodeY not in self.table:
            self.table[nodeY] = []
            self.table[nodeX].append(nodeY)
            self.table[nodeY].append(nodeX)
    
    def disconnect(self, nodeX, nodeY):
        if nodeY in self.table[nodeX] and nodeX in self.table[nodeY]:
            del self.table[nodeX][nodeY]
            del self.table[nodeY][nodeX]

    def isConnected(self, nodeX, nodeY):
        #nodeX = nodeX + self.rowDiff
        if nodeX and nodeY in self.table:
            if nodeY in self.table[nodeX] and nodeX in self.table[nodeY]:
                return True
        return False
    
    def getConnections(self, node):
        #if node > self.rowDiff:
            #node = node - self.rowDiff
        if node in self.table:
            return self.table[node]
        return None

    def getNodes(self):
        return list(self.table)
    
    def getPlatform(self):
        visited = set()
        for key in self.table:
            if key in visited:
                pass
            row, col = key[0], key[1]
            self.grid[row][col] = 1
            visited.add(key)
            for value in self.table[key]:
                if value in visited:
                    pass
                row, col = value[0], value[1]
                self.grid[row][col] = 1
                visited.add(value)
        #for row in range(len(self.platform)):
            #row = row + self.rowDiff #rows marked starting from 20 -> for mult. dict nodes
            #for col in range(self.platform[0]):
                #if nodeX and nodeY in self.table:
                    #if self.table[nodeX][nodeY] == 1 and (
                        #self.table[nodeY][nodeX] == 1):
                        #row = row - self.rowDiff
                        #self.platform[row][col] = 1
        return self.grid
                
    def __repr__(self):
        return str(self.table)

def generateEllers(maze):
    rows, cols = len(maze.grid), len(maze.grid[0])
    vertices = set()
    pass